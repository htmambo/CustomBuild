#
# Copyright (C) 2022 Ing <https://github.com/wjz304>
# 
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#


name: Custom Redpill
on:
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      machine:
        description: 'DS3615xs DS3617xs DS918+ DS920+ DS3622xs+'
        required: false
        default: 'any' 
        type: choice
        options:
        - any
        - TS453DMINI

      platform:
        description: 'DS3615xs DS3617xs DS918+ DS920+ DS3622xs+'
        required: true
        default: 'DS918+' 
        type: choice
        options:
        - DS3615xs
        - DS3617xs
        - DS918+
        - DS920+
        - DS3622xs+

      version:
        description: '7.1.0-42661 7.0.1-42218'
        required: true
        default: '7.1.0-42661' 
        type: choice
        options:
        - 7.1.0-42661
        - 7.0.1-42218

      map: 
        description: 'SataPortMap, DiskIdxMap'
        required: false
        default: ''
        type: string

      sn: 
        description: 'sn'
        required: false
        default: ''
        type: string

      mac: 
        description: 'mac'
        required: false
        default: ''
        type: string

      usb: 
        description: 'pid, vid'
        required: false
        default: '0x0001, 0x46f4'
        type: string

      ext: 
        description: 'ext'
        required: false
        default: ''
        type: string

      exp:
        description: 'pocopico jumkey'
        required: true
        default: 'pocopico' 
        type: choice
        options:
        - 'pocopico'
        - 'jumkey'

      jun:
        description: 'jun'
        required: true
        default: '0' 
        type: choice
        options:
        - '0'
        - '1'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.2

      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Checkout
        uses: actions/checkout@main

      - name: Init Env
        run : |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Shanghai"

          sudo apt update
          sudo apt upgrade -y
          sudo apt install curl bspatch jq git -y
          python -m pip install --upgrade pip setuptools

      - name: Get Issues
        if: github.event_name == 'issues'
        run: |
          issuetitle=$(sed -E 's/[[:space:]|[:punct:]]/_/g' <<<'${{ github.event.issue.title }}')
          issuebodys=$(echo '${{ github.event.issue.body }}' | tr '\r' ' ' | tr '\n' ' ')

          echo ${issuetitle}
          echo ${issuebodys}

          echo "issuetitle=${issuetitle}" >> $GITHUB_ENV
          echo "issuebodys=${issuebodys}" >> $GITHUB_ENV

      - name: Get Info
        uses: jannekem/run-python-script-action@v1.2
        id: info
        with:
          script: |
            import os, re, json, string

            if __name__ == '__main__':

                issues = 'false'
                iscustom = 'true'

                machine = 'any'
                platform = 'DS918+'
                version = '7.1.0-42661'
                sataportmap = ''
                diskidxmap = ''
                sn = ''
                mac = ''
                pid = ''
                vid = ''
                ext = ''
                exp = 'pocopico'
                jun = '0'

                errinfo = ''

                if '${{ github.event_name }}' == 'issues':
                    if '${{ env.issuetitle }}'.lower().startswith('custom'):
                        issues = 'true'

                        body = {}
                        body = json.loads('${{ env.issuebodys }}')
                        
                        if len(body) == 0:
                            iscustom = 'false'
                            errinfo = 'body error'

                        if 'platform' in body:
                            if body['platform'] in ['DS3615xs', 'DS3617xs', 'DS918+', 'DS920+', 'DS3622xs+']:
                                platform = body['platform']
                            else:
                                iscustom = 'false'
                                errinfo = 'platform parameter error'
                                
                        if 'machine' in body:
                            if body['machine'] in ['any', 'TS453DMINI']:
                              machine = body['machine']
                            else:
                              machine = 'any'

                        if 'version' in body:
                            if body['version'] in ['7.1.0-42661', '7.0.1-42218']:
                                version = body['version']
                            else:
                                iscustom = 'false'
                                errinfo = 'version parameter error'

                        if 'map' in body:
                            maps = [x.strip() for x in re.split(',| |\|',body['map']) if x.strip()!='']
                            if len(maps) != 2:
                                iscustom = 'false'
                                errinfo = 'map parameter error'
                            else:
                                if maps[0].isdigit():
                                    sataportmap = maps[0]
                                else:
                                    iscustom = 'false'
                                    errinfo = 'map[sataportmap] parameter error'
                                if all(c in string.hexdigits for c in maps[1]) and len(maps[1]) == 2 * len(maps[0]):
                                    diskidxmap = maps[1]
                                else:
                                    iscustom = 'false'
                                    errinfo = 'map[diskidxmap] parameter error'

                        if 'sn' in body:
                            if body['sn'].isalnum():
                                sn = body['sn']
                            else:
                                iscustom = 'false'
                                errinfo = 'sn parameter error'

                        if 'mac' in body:
                            macs = [x.strip() for x in re.split(',| |\|',body['mac']) if x.strip()!='']
                            if len(macs) <= 0 or len(macs) > 8:
                                iscustom = 'false'
                                errinfo = 'mac parameter error'
                            else:
                                mac = ','.join(macs)
                        
                        if 'usb' in body:
                            usbs = [x.strip() for x in re.split(',| |\|',body['usb']) if x.strip()!='']
                            if len(usbs) != 2:
                                iscustom = 'false'
                                errinfo = 'usb parameter error'
                            else:
                                if len(usbs[0]) == 6 and usbs[0].lower().startswith('0x') and all(c in string.hexdigits for c in usbs[0][2:]):
                                    pid = usbs[0].lower()
                                else:
                                    iscustom = 'false'
                                    errinfo = 'usb[pid] parameter error'

                                if len(usbs[1]) == 6 and usbs[1].lower().startswith('0x') and all(c in string.hexdigits for c in usbs[1][2:]):
                                    vid = usbs[1].lower()
                                else:
                                    iscustom = 'false'
                                    errinfo = 'usb[vid] parameter error'

                        if 'ext' in body:
                            try:
                                import wget
                            except ModuleNotFoundError:
                                os.system('pip3 install wget')
                                import wget
                            if os.path.exists('rpExtsFile'):
                                os.remove('rpExtsFile')
                            res = wget.download('https://raw.githubusercontent.com/pocopico/rp-ext/main/exts', out='rpExtsFile')
                            with open('rpExtsFile', mode="r") as f:
                                rpExts = f.readlines()
                            rpExts = [x.strip() for x in rpExts]
                            exts = [x.strip() for x in re.split(',| |\|',body['ext']) if x.strip()!='']
                            print(rpExts)
                            print(exts)
                            if len(exts) > 0 and set(exts) <= set(rpExts):
                                ext = ','.join(exts)
                            else:
                                iscustom = 'false'
                                errinfo = 'ext parameter error'

                        if 'exp' in body:
                            if body['exp'] in ['pocopico', 'jumkey']:
                                exp = body['exp']
                            else:
                                iscustom = 'false'
                                errinfo = 'exp parameter error'

                        if 'jun' in body:
                            if body['jun'] in ['0', '1']:
                                jun = body['jun']
                            else:
                                iscustom = 'false'
                                errinfo = 'jun parameter error'

                    else:
                        iscustom = 'false'
                else:
                    platform = '${{ inputs.platform }}'
                    machine = '${{ inputs.machine }}'
                    version = '${{ inputs.version }}'
                    maps = [x.strip() for x in re.split(',| |\|','${{ inputs.map }}') if x.strip()!='']
                    if len(maps) != 2:
                        maps = ['','']
                    sataportmap = maps[0]
                    diskidxmap = maps[1]
                    sn = '${{ inputs.sn }}'
                    usbs = [x.strip() for x in re.split(',| |\|','${{ inputs.usb }}') if x.strip()!='']
                    if len(usbs) != 2:
                        usbs = ['','']
                    pid = usbs[0]
                    vid = usbs[1]
                    mac = '${{ inputs.mac }}'
                    ext = '${{ inputs.ext }}'
                    exp = '${{ inputs.exp }}'
                    jun = '${{ inputs.jun }}'

                set_output('issues', issues)
                set_output('iscustom', iscustom)
                set_output('errinfo', errinfo)

                set_output('platform', platform)
                set_output('machine', machine)
                set_output('version', version)
                set_output('sataportmap', sataportmap)
                set_output('diskidxmap', diskidxmap)
                set_output('sn', sn)
                set_output('mac', mac)
                set_output('pid', pid)
                set_output('vid', vid)
                set_output('ext', ext)
                set_output('exp', exp)
                set_output('jun', jun)

      - name: Add labels
        if: steps.info.outputs.issues == 'true' && steps.info.outputs.iscustom == 'true'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'add-labels'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          labels: 'custom'

      - name: Create comment
        if: steps.info.outputs.issues == 'true' && steps.info.outputs.iscustom == 'true'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ${{ github.event.issue.user.login }} 您好.
            您自定义的 Redpill 已开始构建。请前往下面的 URL 查看详细信息。
            > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            ----
            Hi ${{ github.event.issue.user.login }}. 
            Your customized Redpill has started building. Please click the URL below to view the details.
            > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          emoji: heart

      - name: Create comment
        if: steps.info.outputs.issues == 'true' && steps.info.outputs.iscustom == 'false'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ${{ github.event.issue.user.login }} 您好.
            您自定义 Redpill 所填写的信息无法解析, 请参考模板并请重新发起定制。  
            error info: ${{ steps.info.outputs.errinfo }}
            > 
            ----
            Hi ${{ github.event.issue.user.login }}. 
            The information filled in by your customized Redpill cannot be parsed. Please refer to the template and restart customization.
            error info: ${{ steps.info.outputs.errinfo }}
            > 
          emoji: confused

      - name: config
        if: steps.info.outputs.iscustom == 'true'
        uses: jannekem/run-python-script-action@v1.2
        with:
          script: |
            import os, json

            if __name__ == '__main__':
                config = {
                    "extra_cmdline": {
                        "pid": "0x0001",
                        "vid": "0x46f4",
                        "sn": "2150SQRW1ZAHH",
                        "mac1": "001132FA6CD3"
                    },
                    "synoinfo": {
                        "internalportcfg": "0xffff",
                        "maxlanport": "7",
                        "maxdisks": "9",
                        "support_bde_internal_10g": "no",
                        "support_disk_compatibility": "no",
                        "support_memory_compatibility": "no"
                    },
                    "ramdisk_copy": {},
                    "extensions": []
                }

                if '${{ steps.info.outputs.sataportmap }}' != '':
                    config["extra_cmdline"]["SataPortMap"] = '${{ steps.info.outputs.sataportmap }}'
                if '${{ steps.info.outputs.diskidxmap }}' != '':
                    config["extra_cmdline"]["DiskIdxMap"] = '${{ steps.info.outputs.diskidxmap }}'
                  
                if '${{ steps.info.outputs.pid }}' != '':
                  config["extra_cmdline"]["pid"] = '${{ steps.info.outputs.pid }}'
                if '${{ steps.info.outputs.vid }}' != '':
                  config["extra_cmdline"]["vid"] = '${{ steps.info.outputs.vid }}'

                dat = []
                if '${{ steps.info.outputs.sn }}' == '' or '${{ steps.info.outputs.mac }}' == '':
                    try:
                        import wget
                    except ModuleNotFoundError:
                        os.system('pip3 install wget')
                        import wget
                    res = wget.download('https://raw.githubusercontent.com/pocopico/tinycore-redpill/main/serialnumbergen.sh', out='serialnumbergen.sh')
                    os.system('sed -i "s|DS3622xsp|DS3622xs+|g" serialnumbergen.sh')
                    os.system('sed -i "s|echo.*\$(generateMacAddress)|echo \$(generateMacAddress)|g" serialnumbergen.sh')
                    os.system('sed -i "s|echo.*\$(generateSerial \$1)|echo \$(generateSerial \$1)|g" serialnumbergen.sh')
                    dat = os.popen('bash ./serialnumbergen.sh ${{ steps.info.outputs.platform }}').readlines()
                
                if '${{ steps.info.outputs.sn }}' != '':
                    config["extra_cmdline"]["sn"] = '${{ steps.info.outputs.sn }}'
                elif len(dat) == 2:
                    config["extra_cmdline"]["sn"] = dat[1].strip()

                if '${{ steps.info.outputs.mac }}' != '':
                    for index, item in enumerate('${{ steps.info.outputs.mac }}'.split(',')):
                        config["extra_cmdline"]["mac{}".format(index+1)] = item.replace(':', '').upper()
                    config["extra_cmdline"]["netif_num"] = len('${{ steps.info.outputs.mac }}'.split(','))
                elif len(dat) == 2:
                    config["extra_cmdline"]["mac1"] = dat[0].strip().replace(':', '')
                    config["extra_cmdline"]["mac2"] = hex(int(dat[0].strip().replace(':', ''), 16) + 1)[2:].rjust(12,'0').upper()
                    config["extra_cmdline"]["netif_num"] = 2
                
                if '${{ steps.info.outputs.platform }}' in ['DS918+', 'DS920+']:
                    config["synoinfo"]["maxdisks"] = "9"

                if '${{ steps.info.outputs.platform }}' in ['DS3615xs', 'DS3617xs', 'DS3622xs+']:
                    config["synoinfo"]["maxdisks"] = "36"

                print(json.dumps(config, indent=4))

                with open('user_config.json', 'w', encoding="utf-8") as f:
                    f.write(json.dumps(config, indent=4))
                  
      - name: Run Build
        if: steps.info.outputs.iscustom == 'true' && success()
        run: |
          function exdsmpat() {
            pwd
            cd ./cache
            curl -L https://cndl.synology.cn/download/DSM/release/7.1/42661-1/DSM_$1_42661.pat -o ds.pat
            curl -L https://cndl.synology.cn/download/DSM/release/7.0.1/42218/DSM_$1_42218.pat -o oldpat.tar.gz
            mkdir synoesp && tar -C./synoesp/ -xf oldpat.tar.gz rd.gz
            cd synoesp
            xz -dc < rd.gz >rd 2>/dev/null || echo "extract rd.gz"
            cpio -idm <rd 2>&1 || echo "extract rd"
            mkdir extract
            cp ./usr/lib/libcurl.so.4 ./usr/lib/libmbedcrypto.so.5 ./usr/lib/libmbedtls.so.13 ./usr/lib/libmbedx509.so.1 ./usr/lib/libmsgpackc.so.2 ./usr/lib/libsodium.so ./usr/lib/libsynocodesign-ng-virtual-junior-wins.so.7 ./usr/syno/bin/scemd ./extract/
            cd extract && ln -s scemd syno_extract_system_patch && cd ..
            cd ..
            mkdir pat
            sudo LD_LIBRARY_PATH=synoesp/extract synoesp/extract/syno_extract_system_patch ds.pat pat || echo "extract latest pat"
            tar -czvf $2_42661.pat -C ./pat/ . --warning=no-file-changed
            ls -al
            sudo rm -rf ds.pat oldpat.tar.gz synoesp pat
            ls -al
            sha256sum $2_42661.pat
            cd ..
            pwd
          }

          # 开始表演

          repo=${{ steps.info.outputs.exp }}
          branch=develop
          bArgs=''
          if [ ${{ steps.info.outputs.jun }} == '1' ]; then 
            bArgs='BRP_JUN_MOD=1 BRP_DEBUG=1'
            if [ ${repo} == 'pocopico' ]; then 
              branch=jun
            fi
          fi

          git clone -b ${branch} https://github.com/${repo}/redpill-load redpill-load

          cp user_config.json redpill-load/user_config.json

          cd redpill-load

          # 7.1 解密PAT
          if [ ${{ steps.info.outputs.version }} == '7.1.0-42661' ]; then 
            exdsmpat ${{ steps.info.outputs.platform }} $(echo ${{ steps.info.outputs.platform }} | sed 's/DS/ds/g; s/+/p/g')
            ls -al ./cache
            configfile=./config/${{ steps.info.outputs.platform }}/${{ steps.info.outputs.version }}/config.json
            jq -r .os.sha256 ${configfile}
            sed -i "s/$(jq -r .os.sha256 ${configfile})/$(sha256sum ./cache/$(echo ${{ steps.info.outputs.platform }} | sed 's/DS/ds/g; s/+/p/g')_42661.pat | awk '{print $1}')/g" ${configfile}
            jq -r .os.sha256 ${configfile}
          fi

          # 添加必备驱动
          #./ext-manager.sh add https://raw.githubusercontent.com/${repo}/redpill-load/${branch}/redpill-boot-wait/rpext-index.json
          ./ext-manager.sh add https://raw.githubusercontent.com/${repo}/redpill-load/${branch}/redpill-acpid/rpext-index.json
          ./ext-manager.sh add https://raw.githubusercontent.com/${repo}/redpill-load/${branch}/redpill-misc/rpext-index.json
          ./ext-manager.sh add https://raw.githubusercontent.com/${repo}/redpill-load/${branch}/redpill-virtio/rpext-index.json

          # redpill.ko
          synomodel=$(echo ${{ steps.info.outputs.platform }} | sed 's/DS/ds/g; s/+/p/g')_$(echo ${{ steps.info.outputs.version }} | awk -F - '{print $2}')
          extension=$(curl -s --location "https://raw.githubusercontent.com/pocopico/rp-ext/master/redpill/rpext-index.json")
          redpilltgz=$(curl -s --location "$(echo ${extension} | jq -r .releases.$synomodel)" | jq -r '.files[] .url')
          wget ${redpilltgz}
          tar zxvf $(echo ${redpilltgz} | awk -F / '{print $NF}') -C ./ 
          mv ./redpill.ko ./ext/rp-lkm/redpill-linux-v$(modinfo redpill.ko | grep vermagic | awk '{print $2}').ko

          if [ ${{ steps.info.outputs.platform }} == 'DS920+' ]; then
            ./ext-manager.sh add https://raw.githubusercontent.com/pocopico/rp-ext/master/redpill-dtb-static/rpext-index.json
            if [ ${{ steps.info.outputs.machine }} == 'TS453DMINI' ]; then
              wget https://raw.githubusercontent.com/htmambo/Redpill_CustomBuild/main/ts453dmini/ds920p.dts
            else
              wget https://raw.githubusercontent.com/pocopico/tinycore-redpill/main/ds920p.dts
            fi

            # Dynamic generation
            # ./redpill-qjs-dtb/src/dts.js 
            qjs --std ./redpill-qjs-dtb/src/dts.js ./ds920p.dts ./output.dts.out
            if [ $? -ne 0 ]; then
                echo "auto generated dts file is broken"
                exit 0
            fi
            ./redpill-qjs-dtb/src/dtc -I dts -O dtb -o ./model_r2.dtb ./output.dts.out
            cp -vf ./model_r2.dtb /etc.defaults/model.dtb
            cp -vf ./model_r2.dtb /var/run/model.dtb

            # if [ -n ${{ steps.info.outputs.dtb }} ]; then
            #   dtbs=${{ steps.info.outputs.dtb }}
            #
            #   let diskslot=1
            #   for disk in $localdisks; do
            #     diskpath=$(udevadm info --query path --name $disk | awk -F "\/" '{print $4 ":" $5 }' | awk -F ":" '{print $2 ":" $3 "," $6}' | sed 's/,*$//')
            #     if [ "$HYPERVISOR" == "VMware" ]; then
            #         diskport=$(udevadm info --query path --name $disk | sed -n '/target/{s/.*target[1-9]//;p;}' | awk -F: '{print $1}')
            #     else
            #         diskport=$(udevadm info --query path --name $disk | sed -n '/target/{s/.*target//;p;}' | awk -F: '{print $1}')
            #     fi
            # 
            #     echo "Found local disk $disk with path $diskpath, adding into internal_slot $diskslot with portnumber $diskport"
            #     if [ "${dtbfile}" == "ds920p" ]; then
            #         sed -i "/internal_slot\@${diskslot} {/!b;n;n;n;n;n;n;n;cpcie_root = \"$diskpath\";" ${dtbfile}.dts
            #         sed -i "/internal_slot\@${diskslot} {/!b;n;n;n;n;n;n;n;n;cata_port = <0x$diskport>;" ${dtbfile}.dts
            #         let diskslot=$diskslot+1
            #     else
            #         sed -i "/internal_slot\@${diskslot} {/!b;n;n;n;n;n;cpcie_root = \"$diskpath\";" ${dtbfile}.dts
            #         sed -i "/internal_slot\@${diskslot} {/!b;n;n;n;n;n;n;cata_port = <0x$diskport>;" ${dtbfile}.dts
            #         let diskslot=$diskslot+1
            #     fi
            #   done
            #
            #   let nvmeslot=1
            #   for nvme in $localnvme; do
            #       nvmepath=$(udevadm info --query path --name $nvme | awk -F "\/" '{print $4 ":" $5 }' | awk -F ":" '{print $2 ":" $3 "," $6}' | sed 's/,*$//')
            #       echo "Found local nvme $nvme with path $nvmepath, adding into m2_card $nvmeslot"
            #       if [ "${dtbfile}" == "ds920p" ]; then
            #           sed -i "/nvme_slot\@${nvmeslot} {/!b;n;cpcie_root = \"$nvmepath\";" ${dtbfile}.dts
            #           let diskslot=$diskslot+1
            #       else
            #           sed -i "/m2_card\@${nvmeslot} {/!b;n;n;n;cpcie_root = \"$nvmepath\";" ${dtbfile}.dts
            #           let nvmeslot=$diskslot+1
            #       fi
            #   done
            # fi
          fi

          # 添加扩展驱动
          if [ -n ${{ steps.info.outputs.ext }} ]; then
            ext=${{ steps.info.outputs.ext }}
            exts=(${ext//,/ })
            for item in ${exts[@]}
            do
              ./ext-manager.sh add "https://raw.githubusercontent.com/pocopico/rp-ext/master/${item}/rpext-index.json"
            done
          fi

          # 编译
          # sed -i "s|#!/usr/bin/env bash|#!/usr/bin/env -S bash -x|g" ./build-loader.sh
          sudo ${bArgs} BRP_USER_CFG=user_config.json ./build-loader.sh '${{ steps.info.outputs.platform }}' '${{ steps.info.outputs.version }}'

      - name: Generate release tag
        if: steps.info.outputs.iscustom == 'true' && success()
        id: tag
        run: |
          echo "### Redpill Custom By ${{ github.event.issue.user.login }}" >> $GITHUB_STEP_SUMMARY
          if [ ${{ steps.info.outputs.issues }} == 'true' ]; then
            echo "👉 issues: [#${{ github.event.issue.number }}]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/issues/${{ github.event.issue.number }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "👉 "platform": "${{ steps.info.outputs.platform }}"  " >> $GITHUB_STEP_SUMMARY
            echo "👉 "version": "${{ steps.info.outputs.version }}", "jun": "${{ steps.info.outputs.jun }}"  " >> $GITHUB_STEP_SUMMARY
            echo "👉 "ext": "${{ steps.info.outputs.ext }}"  " >> $GITHUB_STEP_SUMMARY
          fi

          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          echo "::set-output name=repository_name::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')"

      - name: Upload to Artifacts
        if: steps.info.outputs.iscustom == 'true' && success()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.tag.outputs.repository_name }}-Custom-${{ steps.tag.outputs.release_tag }}
          path: |
            redpill-load/user_config.json
            redpill-load/images/*.img

      - name: Create comment
        if: steps.info.outputs.issues == 'true' && steps.info.outputs.iscustom == 'true' && success()
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ${{ github.event.issue.user.login }} 您好.
            您自定义的 Redpill 已构建完成。请前往下面的 URL 下载。
            > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}  
            ----
            Hi ${{ github.event.issue.user.login }}. 
            Your customized Redpill has been builded. Please click the URL below to download it.
            > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          emoji: hooray

      - name: Close issue
        if: steps.info.outputs.issues == 'true' && steps.info.outputs.iscustom == 'true' && success()
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'close-issue'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}

      - name: Create comment
        if: steps.info.outputs.issues == 'true' && steps.info.outputs.iscustom == 'true' && failure()
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ${{ github.event.issue.user.login }} 您好.
            您自定义的 Redpill 构建失败。请前往下面的 URL 查看详细信息。请自行关闭本 Issues 并在进行调整后重新创建一个 Issues 来发起重新构建。
            > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}  
            ----
            Hi ${{ github.event.issue.user.login }}. 
            Your customized Redpill build failed. Please click the URL below to view the details. Please close this issue by yourself and re create an issue after adjustment to initiate the rebuild.
            > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          emoji: hooray
